"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

SITE_ID = 1

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "blog",
    "taggit",
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.postgres',
    "accounts",
    'social_django',
    'django_summernote',
    'django_bootstrap5'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'blog',
        'USER': 'blog',
        'PASSWORD': '123go',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Конфигурация сервера электронной почты
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

EMAIL_PORT = 587
EMAIL_USE_TLS = True


LOGIN_REDIRECT_URL = "/"

SESSION_COOKIE_AGE = 60 * 60 * 24 * 30

MEDIA_ROOT = BASE_DIR/'media'
MEDIA_URL = '/media/'


AUTHENTICATION_BACKENDS = (
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.google.GoogleOAuth2',

    'django.contrib.auth.backends.ModelBackend',
)


# social auth configs for github
SOCIAL_AUTH_GITHUB_KEY = os.environ.get('SOCIAL_AUTH_GITHUB_KEY')
SOCIAL_AUTH_GITHUB_SECRET = os.environ.get('SOCIAL_AUTH_GITHUB_SECRET')

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

SUMMERNOTE_THEME = 'bs5'

SUMMERNOTE_CONFIG = {
    # Использование SummernoteWidget - в iframe
    'iframe': True,

    # Или вы можете установить значение `False`, чтобы использовать SummernoteInplaceWidget - без режима iframe.
    # В этом случае вам придется загружать источники и зависимости Bootstrap/jQuery вручную.
    # Используйте это, когда вы уже используете темы на основе Bootstrap/jQuery.

    # Пользовательские настройки Summernote
    'summernote': {
        # Включение Air-mode
        # Подробнее - https://summernote.org/examples/
        'airMode': False,

        # Размеры редактора
        'width': '100%',
        'height': '350',

        # Язык редактора
        'lang': None
    },

    #     # Кастомизация
    #     # https://summernote.org/deep-dive/#custom-toolbar-popover
    #     'toolbar': [
    #         ['style', ['style']],
    #         ['font', ['bold', 'underline', 'clear']],
    #         ['fontname', ['fontname']],
    #         ['color', ['color']],
    #         ['para', ['ul', 'ol', 'paragraph']],
    #         ['table', ['table']],
    #         ['insert', ['link', 'picture', 'video']],
    #         ['view', ['fullscreen', 'codeview', 'help']],
    #     ],
    #
    #     # Вы также можете добавить пользовательские настройки для внешних плагинов
    #     'print': {
    #         'stylesheetUrl': '/some_static_folder/printable.css',
    #     },
    #     'codemirror': {
    #         'mode': 'htmlmixed',
    #         'lineNumbers': 'true',
    #         # Вы должны включить файл темы в 'css' или 'css_for_inplace' перед его использованием.
    #         'theme': 'monokai',
    #     },
    # },
    #
    # # Требовать аутентификацию пользователей для загрузки вложений.
    # 'attachment_require_authentication': True,
    #
    # # Установите функцию `upload_to` для вложений.
    # # 'attachment_upload_to': my_custom_upload_to_func(),
    #
    # # Установите пользовательский класс хранения для вложений.
    # 'attachment_storage_class': 'my.custom.storage.class.name',
    #
    # # Установка пользовательской модели для вложений (default: 'django_summernote.Attachment')
    # 'attachment_model': 'my.custom.attachment.model',  # должен наследовать 'django_summernote.AbstractAttachment'
    #
    # # Вы можете полностью отключить функцию вложений.
    # 'disable_attachment': False,
    #
    # # Установите значение `True`, чтобы возвращать пути вложений в абсолютных URI.
    # 'attachment_absolute_uri': False,
    #
    # # Вы можете добавить пользовательские css/js для SummernoteWidget.
    # # Обязательно поместите {{ form.media }} в шаблон перед тем, как инициировать summernote.
    # 'css': (
    # ),
    # 'js': (
    # ),
    #
    # Ленивая инициализация (lazy-load)
    'lazy': True
}
